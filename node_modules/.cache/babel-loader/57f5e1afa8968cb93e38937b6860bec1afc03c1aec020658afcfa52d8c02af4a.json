{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8080\"; // API Gateway URL\nconst API_VERSION = \"/api/v1\"; // Add version if your backend uses it\n\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      console.log(`Making request to: ${url}`); // For debugging\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        let errorMessage = `HTTP error! status: ${response.status}`;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.error || errorMessage;\n        } catch (e) {\n          // If response is not JSON, use status text\n          errorMessage = response.statusText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n\n      // Handle empty responses (like DELETE operations)\n      const contentType = response.headers.get(\"content-type\");\n      if (contentType && contentType.includes(\"application/json\")) {\n        return await response.json();\n      } else {\n        return {}; // Return empty object for non-JSON responses\n      }\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      throw error;\n    }\n  }\n\n  // Book Service APIs (routed through API Gateway)\n  async getBooks() {\n    return this.request(\"/books\");\n  }\n  async getBook(id) {\n    return this.request(`/books/${id}`);\n  }\n  async searchBooks(searchTerm) {\n    return this.request(`/books/search?q=${encodeURIComponent(searchTerm)}`);\n  }\n  async createBook(bookData) {\n    return this.request(\"/books\", {\n      method: \"POST\",\n      body: JSON.stringify(bookData)\n    });\n  }\n  async updateBook(id, bookData) {\n    return this.request(`/books/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(bookData)\n    });\n  }\n  async deleteBook(id) {\n    return this.request(`/books/${id}`, {\n      method: \"DELETE\"\n    });\n  }\n\n  // Member Service APIs\n  async getMembers() {\n    return this.request(\"/members\");\n  }\n  async getMember(id) {\n    return this.request(`/members/${id}`);\n  }\n  async createMember(memberData) {\n    return this.request(\"/members\", {\n      method: \"POST\",\n      body: JSON.stringify(memberData)\n    });\n  }\n  async updateMember(id, memberData) {\n    return this.request(`/members/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(memberData)\n    });\n  }\n  async updateMemberStatus(id, status) {\n    return this.request(`/members/${id}/status`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        status\n      })\n    });\n  }\n\n  // Transaction Service APIs\n  async getTransactions() {\n    return this.request(\"/transactions\");\n  }\n  async getMemberTransactions(memberId) {\n    return this.request(`/transactions/member/${memberId}`);\n  }\n  async borrowBook(borrowData) {\n    return this.request(\"/transactions/borrow\", {\n      method: \"POST\",\n      body: JSON.stringify(borrowData)\n    });\n  }\n  async returnBook(transactionId) {\n    return this.request(`/transactions/${transactionId}/return`, {\n      method: \"PUT\"\n    });\n  }\n  async getOverdueTransactions() {\n    return this.request(\"/transactions/overdue\");\n  }\n\n  // Fine Service APIs\n  async getFines() {\n    return this.request(\"/fines\");\n  }\n  async getMemberFines(memberId) {\n    return this.request(`/fines/member/${memberId}`);\n  }\n  async createFine(fineData) {\n    return this.request(\"/fines\", {\n      method: \"POST\",\n      body: JSON.stringify(fineData)\n    });\n  }\n  async payFine(fineId) {\n    return this.request(`/fines/${fineId}/pay`, {\n      method: \"PUT\"\n    });\n  }\n\n  // Notification Service APIs\n  async getNotifications() {\n    return this.request(\"/notifications\");\n  }\n  async getMemberNotifications(memberId) {\n    return this.request(`/notifications/member/${memberId}`);\n  }\n  async createNotification(notificationData) {\n    return this.request(\"/notifications\", {\n      method: \"POST\",\n      body: JSON.stringify(notificationData)\n    });\n  }\n  async sendDueReminders() {\n    return this.request(\"/notifications/due-reminders\", {\n      method: \"POST\"\n    });\n  }\n  async sendOverdueAlerts() {\n    return this.request(\"/notifications/overdue-alerts\", {\n      method: \"POST\"\n    });\n  }\n\n  // Health check for all services\n  async checkServiceHealth() {\n    try {\n      const services = [\"books\", \"members\", \"transactions\", \"fines\", \"notifications\"];\n      const healthChecks = await Promise.allSettled(services.map(service => this.request(`/${service}/health`)));\n      return services.reduce((acc, service, index) => {\n        acc[service] = healthChecks[index].status === \"fulfilled\" ? \"UP\" : \"DOWN\";\n        return acc;\n      }, {});\n    } catch (error) {\n      console.error(\"Health check failed:\", error);\n      return {};\n    }\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","API_VERSION","ApiService","request","endpoint","options","url","config","headers","Accept","console","log","response","fetch","ok","errorMessage","status","errorData","json","message","error","e","statusText","Error","contentType","get","includes","getBooks","getBook","id","searchBooks","searchTerm","encodeURIComponent","createBook","bookData","method","body","JSON","stringify","updateBook","deleteBook","getMembers","getMember","createMember","memberData","updateMember","updateMemberStatus","getTransactions","getMemberTransactions","memberId","borrowBook","borrowData","returnBook","transactionId","getOverdueTransactions","getFines","getMemberFines","createFine","fineData","payFine","fineId","getNotifications","getMemberNotifications","createNotification","notificationData","sendDueReminders","sendOverdueAlerts","checkServiceHealth","services","healthChecks","Promise","allSettled","map","service","reduce","acc","index","apiService"],"sources":["/Users/nehalmr/Desktop/library-management-system-reactive-fe/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8080\" // API Gateway URL\nconst API_VERSION = \"/api/v1\" // Add version if your backend uses it\n\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers,\n      },\n      ...options,\n    }\n\n    try {\n      console.log(`Making request to: ${url}`) // For debugging\n      const response = await fetch(url, config)\n\n      if (!response.ok) {\n        let errorMessage = `HTTP error! status: ${response.status}`\n        try {\n          const errorData = await response.json()\n          errorMessage = errorData.message || errorData.error || errorMessage\n        } catch (e) {\n          // If response is not JSON, use status text\n          errorMessage = response.statusText || errorMessage\n        }\n        throw new Error(errorMessage)\n      }\n\n      // Handle empty responses (like DELETE operations)\n      const contentType = response.headers.get(\"content-type\")\n      if (contentType && contentType.includes(\"application/json\")) {\n        return await response.json()\n      } else {\n        return {} // Return empty object for non-JSON responses\n      }\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error)\n      throw error\n    }\n  }\n\n  // Book Service APIs (routed through API Gateway)\n  async getBooks() {\n    return this.request(\"/books\")\n  }\n\n  async getBook(id) {\n    return this.request(`/books/${id}`)\n  }\n\n  async searchBooks(searchTerm) {\n    return this.request(`/books/search?q=${encodeURIComponent(searchTerm)}`)\n  }\n\n  async createBook(bookData) {\n    return this.request(\"/books\", {\n      method: \"POST\",\n      body: JSON.stringify(bookData),\n    })\n  }\n\n  async updateBook(id, bookData) {\n    return this.request(`/books/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(bookData),\n    })\n  }\n\n  async deleteBook(id) {\n    return this.request(`/books/${id}`, {\n      method: \"DELETE\",\n    })\n  }\n\n  // Member Service APIs\n  async getMembers() {\n    return this.request(\"/members\")\n  }\n\n  async getMember(id) {\n    return this.request(`/members/${id}`)\n  }\n\n  async createMember(memberData) {\n    return this.request(\"/members\", {\n      method: \"POST\",\n      body: JSON.stringify(memberData),\n    })\n  }\n\n  async updateMember(id, memberData) {\n    return this.request(`/members/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(memberData),\n    })\n  }\n\n  async updateMemberStatus(id, status) {\n    return this.request(`/members/${id}/status`, {\n      method: \"PUT\",\n      body: JSON.stringify({ status }),\n    })\n  }\n\n  // Transaction Service APIs\n  async getTransactions() {\n    return this.request(\"/transactions\")\n  }\n\n  async getMemberTransactions(memberId) {\n    return this.request(`/transactions/member/${memberId}`)\n  }\n\n  async borrowBook(borrowData) {\n    return this.request(\"/transactions/borrow\", {\n      method: \"POST\",\n      body: JSON.stringify(borrowData),\n    })\n  }\n\n  async returnBook(transactionId) {\n    return this.request(`/transactions/${transactionId}/return`, {\n      method: \"PUT\",\n    })\n  }\n\n  async getOverdueTransactions() {\n    return this.request(\"/transactions/overdue\")\n  }\n\n  // Fine Service APIs\n  async getFines() {\n    return this.request(\"/fines\")\n  }\n\n  async getMemberFines(memberId) {\n    return this.request(`/fines/member/${memberId}`)\n  }\n\n  async createFine(fineData) {\n    return this.request(\"/fines\", {\n      method: \"POST\",\n      body: JSON.stringify(fineData),\n    })\n  }\n\n  async payFine(fineId) {\n    return this.request(`/fines/${fineId}/pay`, {\n      method: \"PUT\",\n    })\n  }\n\n  // Notification Service APIs\n  async getNotifications() {\n    return this.request(\"/notifications\")\n  }\n\n  async getMemberNotifications(memberId) {\n    return this.request(`/notifications/member/${memberId}`)\n  }\n\n  async createNotification(notificationData) {\n    return this.request(\"/notifications\", {\n      method: \"POST\",\n      body: JSON.stringify(notificationData),\n    })\n  }\n\n  async sendDueReminders() {\n    return this.request(\"/notifications/due-reminders\", {\n      method: \"POST\",\n    })\n  }\n\n  async sendOverdueAlerts() {\n    return this.request(\"/notifications/overdue-alerts\", {\n      method: \"POST\",\n    })\n  }\n\n  // Health check for all services\n  async checkServiceHealth() {\n    try {\n      const services = [\"books\", \"members\", \"transactions\", \"fines\", \"notifications\"]\n      const healthChecks = await Promise.allSettled(services.map((service) => this.request(`/${service}/health`)))\n\n      return services.reduce((acc, service, index) => {\n        acc[service] = healthChecks[index].status === \"fulfilled\" ? \"UP\" : \"DOWN\"\n        return acc\n      }, {})\n    } catch (error) {\n      console.error(\"Health check failed:\", error)\n      return {}\n    }\n  }\n}\n\nexport const apiService = new ApiService()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}